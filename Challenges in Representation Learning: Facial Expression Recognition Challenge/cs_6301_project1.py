# -*- coding: utf-8 -*-
"""CS_6301_Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ewa13mT_wHUq0DUCB-wWTe-NI-M9mkGu
"""

import pandas as pd
import numpy as np
import keras
keras.__version__

import cv2
from keras import layers
from keras import models
from google.colab import files
from keras.utils import to_categorical
from keras.callbacks import History 
history = History()
import matplotlib.pyplot as plt

raw_data = pd.read_csv('/content/icml_face_data.csv')

train_images = []
test_images = []

train_labels = []
test_labels = []

for index, row in raw_data.iterrows():
  pixels = np.asarray(list(row[' pixels'].split(' ')), dtype=np.uint8)
  image = pixels.reshape((48, 48, 1))
  image = image.astype('float32') / 255
  if row[' Usage'] == 'Training':
    train_images.append(image)
    train_labels.append(row['emotion'])
  else:
    test_images.append(image)
    test_labels.append(row['emotion'])

train_images = np.array(train_images)
train_labels = np.array(train_labels)

test_images = np.array(test_images)
test_labels = np.array(test_labels)

print(train_images.shape)
print(train_labels.shape)
print(test_images.shape)
print(test_labels.shape)

print(train_labels.shape)
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
print(train_labels.shape[1])
print(test_labels.shape[1])

# Model - 0
# Model with ReLU and Softmax with 3 conv2D layers,2 Max pooling layers, Categorical_crossentropy and 4 dense layers

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(32, activation='relu'))
model.add(layers.Dense(32, activation='relu'))
model.add(layers.Dense(32, activation='relu'))
model.add(layers.Dense(train_labels.shape[1], activation='softmax'))

model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model.fit(train_images, train_labels, epochs=10, batch_size=64)

model.summary()

test_loss, test_acc = model.evaluate(test_images, test_labels)
print(test_acc)
print(test_loss)

pred_labels = model.predict(test_images)
pred_labels_row = np.argmax(pred_labels,axis=1)
test_label_row = np.argmax(test_labels,axis=1)
pred_labels_row.shape
test_label_row.shape

pred_labels
comp = np.concatenate([pred_labels_row.reshape(-1,1),test_label_row.reshape(-1,1)],axis=1)
np.set_printoptions(threshold=np.inf)
comp

train_loss =[]
train_acc = []
test_loss = []
test_acc = []

def model_def(epoch):
  model = models.Sequential()
  model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)))
  model.add(layers.MaxPooling2D((2, 2)))
  model.add(layers.Conv2D(64, (3, 3), activation='relu'))
  model.add(layers.MaxPooling2D((2, 2)))
  model.add(layers.Conv2D(64, (3, 3), activation='relu'))

  model.add(layers.Flatten())
  model.add(layers.Dense(32, activation='relu'))
  model.add(layers.Dense(32, activation='relu'))
  model.add(layers.Dense(32, activation='relu'))
  model.add(layers.Dense(train_labels.shape[1], activation='softmax'))  
  
  model.compile(optimizer='rmsprop',
                loss='categorical_crossentropy',
                metrics=['accuracy'])
  print(epoch)
  seqModel = model.fit(train_images, train_labels, epochs= epoch, batch_size = 64)
  testing_loss, testing_acc = model.evaluate(test_images, test_labels)
  print(seqModel.history['loss'][epoch-1],seqModel.history['acc'][epoch-1], testing_loss,testing_acc)
  train_loss.append(seqModel.history['loss'][epoch-1])
  train_acc.append(seqModel.history['acc'][epoch-1])
  test_loss.append(testing_loss)
  test_acc.append(testing_acc)

for e in range(3,16,3):
  model_def(e)

print("Training Loss for 5 different Epochs : " , train_loss)
print("Training Accuracy for 5 different Epochs : " , train_acc)
print("Testing Loss for 5 different Epochs : " , test_loss)
print("Training Accuracy for 5 different Epochs : " , test_acc)

plt.figure(figsize=(9,5))
plt.plot([3,6,9,12,15], train_loss, linewidth=4, marker='o', markersize=10)
plt.plot([3,6,9,12,15], test_loss, linewidth=4, marker='s', markersize=10)
plt.xlabel('Epochs used for model fitting', fontsize=10)
plt.ylabel('Training loss vs Testing loss', fontsize=10)
plt.legend(['Train loss','Test loss'], fontsize=10, loc='upper right')
plt.axis([2, 13, -1, 6])
plt.show()

plt.figure(figsize=(9,5))
plt.plot([3,6,9,12,15], train_acc, linewidth=4, marker='o', markersize=10)
plt.plot([3,6,9,12,15], test_acc, linewidth=4, marker='s', markersize=10)
plt.xlabel('Epochs used for model fitting', fontsize=10)
plt.ylabel('Training Accuracy vs Testing Accuracy', fontsize=10)
plt.legend(['Train Accuracy','Test Accuracy'], fontsize=10, loc='lower right')
plt.axis([2, 16, 0, 1])
plt.show()